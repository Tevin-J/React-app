{"version":3,"sources":["components/Content/Dialogs/Dialogs.module.css","components/Content/Dialogs/DialogItem/DialogItem.jsx","components/Content/Dialogs/Message/Message.jsx","components/Content/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Content/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","style","dialog","to","id","activeClassName","activeLink","avatar","name","Message","classNameMessageFrom","from","messageFrom0","messageFrom1","message","src","maxLength100","maxLengthCreator","AddMessageReduxForm","reduxForm","form","sendBlock","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","messagesElements","messagesData","dialogs","dialogsItems","messagesItem","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","newMessageText","sendMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,aAAe,8BAA8B,QAAU,yBAAyB,aAAe,8BAA8B,aAAe,8BAA8B,UAAY,6B,+FCenVC,EAVI,SAACC,GAChB,OACI,yBAAKC,UAAWC,IAAMC,QAClB,kBAAC,IAAD,CAASC,GAAI,YAAcJ,EAAMK,GAAIC,gBAAiBJ,IAAMK,YAAaP,EAAMQ,OAAQR,EAAMS,MADjG,MCaOC,EAhBC,SAACV,GAEb,IAAIW,EAAuC,IAAfX,EAAMY,KAAcV,IAAMW,aAAeX,IAAMY,aAEvE,OACA,yBAAKb,UAAWC,IAAMa,SAClB,yBAAKd,UAAWU,GAEZ,yBAAKK,IAAI,gFACRhB,EAAMe,W,iCCLjBE,EAAeC,YAAiB,KAahCC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAZL,SAACpB,GACpB,OACI,0BAAMC,UAAWC,IAAMoB,UAAWC,SAAUvB,EAAMwB,cAC9C,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUZ,GAAeR,KAAK,iBAAiBqB,YAAY,wBAEtG,6BACI,6CAmCDC,EA1BC,SAAC/B,GAEb,IAAIgC,EAAQhC,EAAMiC,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAAjC,GAAM,OAAI,kBAAC,EAAD,CAAYE,GAAIF,EAAOE,GAAII,KAAMN,EAAOM,KAC5BD,OAAS,yBAAKQ,IAAKb,EAAOK,cACxF6B,EAAmBL,EAAMM,aAAaF,KAAI,SAAArB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASH,KAAMG,EAAQH,UAK1G,OACI,6BACI,yBAAKX,UAAWC,IAAMqC,SAClB,yBAAKtC,UAAWC,IAAMsC,cACjBN,GAEL,yBAAKjC,UAAWC,IAAMuC,cACjBJ,IAGT,kBAAClB,EAAD,CAAqBI,SAbP,SAACmB,GACnB1C,EAAM2C,YAAYD,EAAOE,qB,uDC7B7BC,EAA6B,SAACb,GAC9B,MACI,CACIc,OAAQd,EAAMe,KAAKD,S,OCkBhBE,sBACXC,aArBkB,SAACjB,GAEnB,MACI,CACIC,YAAaD,EAAMC,gBAKN,SAACiB,GAEtB,MACI,CACIP,YAAa,SAACQ,GACVD,EAASE,YAAyBD,UDPlB,SAACE,GAAe,IACtCC,EADqC,iLAGnC,OAAKC,KAAKvD,MAAM8C,OAGT,kBAACO,EAAcE,KAAKvD,OAFhB,kBAAC,IAAD,CAAUI,GAAG,eAJW,GACXoD,IAAMH,WAWtC,OADqCJ,YAAQJ,EAARI,CAAoCK,KCE9DN,CAGbjB","file":"static/js/4.cfe1f3a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2BWSm\",\"dialogsItems\":\"Dialogs_dialogsItems__1PGE0\",\"dialog\":\"Dialogs_dialog__3btnD\",\"activeLink\":\"Dialogs_activeLink__303NL\",\"messagesItem\":\"Dialogs_messagesItem__1ZaJT\",\"message\":\"Dialogs_message__ljtbE\",\"messageFrom0\":\"Dialogs_messageFrom0__2hmI2\",\"messageFrom1\":\"Dialogs_messageFrom1__3FQ5t\",\"sendBlock\":\"Dialogs_sendBlock__311P1\"};","import React from 'react';\r\nimport style from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={style.dialog}>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={style.activeLink}>{props.avatar}{props.name}</NavLink> {/*с помощью\r\n            NavLink переключаемся по вкладкам без перезагрузки страницы. меняет url а то что в свойстве 'to'*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n\r\nDialogItem.propTypes = {\r\n    id: PropTypes.number,\r\n    avatar: PropTypes.object,\r\n    name: PropTypes.string\r\n}","import React from 'react';\r\nimport style from './../Dialogs.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport DialogItem from \"../DialogItem/DialogItem\";\r\n\r\nconst Message = (props) => {\r\n\r\n    let classNameMessageFrom =  props.from === 0 ?  style.messageFrom0 : style.messageFrom1;\r\n\r\n        return (\r\n        <div className={style.message}>\r\n            <div className={classNameMessageFrom}>\r\n\r\n                <img src=\"https://joidesresolution.org/wp-content/uploads/mappress/icons/blue-dot.png\"/>\r\n                {props.message}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Message;\r\n\r\nMessage.propTypes = {\r\n    from: PropTypes.number,\r\n    message: PropTypes.string\r\n}","import React from 'react';\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport PropTypes from 'prop-types';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utilits/validators/validators\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form className={style.sendBlock} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength100]} name='newMessageBody' placeholder='Enter your message'/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageReduxForm = reduxForm({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogsData.map(dialog => <DialogItem id={dialog.id} name={dialog.name}\r\n                                                                      avatar= {<img src={dialog.avatar}/>}/>);\r\n    let messagesElements = state.messagesData.map(message => <Message message={message.message} from={message.from}/>);\r\n\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={style.dialogs}>\r\n                <div className={style.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n                <div className={style.messagesItem}>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;\r\n\r\nDialogs.propTypes = {\r\n    dialogsData: PropTypes.array,\r\n    messagesData: PropTypes.array,\r\n    newMessageText: PropTypes.string\r\n}","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n/*вынесли HOC по редиректу и необходимые для него данные в отдельную компоненту. isAuth будет по дефолту в реализации\r\nредиректа и отдельно эти данные в компоненты, которые нужно редиректить, прокидывать не надо*/\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return (\r\n        {\r\n            isAuth: state.auth.isAuth\r\n        }\r\n    )\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to='/login'/>\r\n            }\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\nimport {sendMessageActionCreator} from \"../../../Redux/dialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => { //mapStateToProps - ф-я которая создает объект, которые возвращают state.\r\n    // Этот state это аналог state=store.getState()\r\n    return (\r\n        {\r\n            dialogsPage: state.dialogsPage //св-во dialogsPage попадает в пропсы в компоненту Dialogs\r\n        }\r\n    )\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => { //mapDispatchToProps - ф-я которая создает объект, из которого в пропсы\r\n    // попадут коллбеки. эти коллбеки диспатчат что-то в store dispatch приходит как store.dispatch().bind(store)\r\n    return (\r\n        {\r\n            sendMessage: (newMessageText) => {\r\n                dispatch(sendMessageActionCreator(newMessageText))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n"],"sourceRoot":""}