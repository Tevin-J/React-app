{"version":3,"sources":["components/Content/Profile/ProfileInfo/ProfileInfo.module.css","components/Content/Profile/MyPosts/MyPosts.module.css","components/Content/Profile/MyPosts/Post/Post.module.css","assets/images/like.svg","components/Content/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Content/Profile/ProfileInfo/ProfileDataForm.jsx","components/Content/Profile/ProfileInfo/ProfileInfo.jsx","components/Content/Profile/MyPosts/Post/Post.jsx","components/Content/Profile/MyPosts/MyPosts.jsx","components/Content/Profile/MyPosts/MyPostsContainer.jsx","components/Content/Profile/Profile.jsx","components/Content/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","autoFocus","value","onChange","e","currentTarget","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","profileInfoBlock","s","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","toLocaleLowerCase","Contact","contactTitle","contactValue","ProfileData","isOwner","activateEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","savePhoto","saveProfile","Preloader","profileInfo","photos","large","src","defaultUserPhoto","target","files","length","formData","then","initialValues","Post","post","avatar","postText","message","likeBlock","like","likesCount","maxLength10","maxLengthCreator","AddNewPostReduxForm","Field","component","name","placeholder","validate","required","MyPosts","React","memo","postsElements","postData","reverse","id","myPosts","values","addPost","newPostBody","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.7eb1ef6e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__2bMjf\",\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__HBBSN\",\"contact\":\"ProfileInfo_contact__2j3Go\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3a84W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3oQRI\",\"avatar\":\"Post_avatar__145dF\",\"postText\":\"Post_postText__28n2w\",\"likeBlock\":\"Post_likeBlock__3aVTb\"};","module.exports = __webpack_public_path__ + \"static/media/like.f2610513.svg\";","import React, {useState, useEffect} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    /*let stateWithSetState = useState(false)\r\n    let editMode = stateWithSetState[0]\r\n    let setEditMode = stateWithSetState[1]\r\n    аналогично записи ниже*/\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChanged = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '- - - - -'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onBlur={deactivateEditMode} autoFocus={true} value={status} onChange={onStatusChanged}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks;","import style from \"./ProfileInfo.module.css\";\r\nimport s from '../../../Common/FormsControls/FormsControls.module.css'\r\nimport React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={style.profileInfoBlock}>\r\n                <div><button>сохранить</button></div>\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div><b>Имя</b></div> {createField('Мое имя', 'fullName', Input, [])}\r\n                <div>\r\n                    <b>В поисках работы: </b>\r\n                    {createField('', 'lookingForAJob', Input, [], {type: 'checkbox'})}\r\n                </div>\r\n                <div>\r\n                    <b>Мои навыки: </b> {createField('Мои профессиональные навыки', 'lookingForAJobDescription', Textarea, [])}\r\n                </div>\r\n                <div>\r\n                    <b>Обо мне: </b> {createField('информация обо мне', 'aboutMe', Textarea, [])}\r\n                </div>\r\n                <div>\r\n                <b>Мои контакты: </b> {Object.keys(profile.contacts).map(key => {\r\n                return (\r\n                    <div key={key} className={style.contact}>\r\n                        <b>{key}: </b> {createField(key, 'contacts.' + key.toLocaleLowerCase(), Input, [])}\r\n                    </div>\r\n                )\r\n                })}\r\n            </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm","import React, {useState} from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport Preloader from \"../../../Common/Preloader/Preloader\";\r\nimport defaultUserPhoto from '../../../../assets/images/defaultUserPhoto.svg'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n        () =>  setEditMode(false)\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className={style.profileInfo}>\r\n                    {profile.photos.large\r\n                        ? <img src={profile.photos.large}/>\r\n                        : <img src={defaultUserPhoto}/>\r\n                    }\r\n                    {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                    {editMode\r\n                        ? <ProfileDataFormReduxForm profile={profile} onSubmit={onSubmit} initialValues={profile}/>\r\n                        : <ProfileData profile={profile} isOwner={isOwner} activateEditMode={() => setEditMode(true)}/>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={style.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\nconst ProfileData = ({profile, isOwner, activateEditMode}) => {\r\n    return (\r\n        <div className={style.profileInfoBlock}>\r\n            {isOwner && <div><button onClick={activateEditMode}>Редактировать</button></div>}\r\n            <div><b>{profile.fullName}</b></div>\r\n            <div>\r\n                <b>В поисках работы: </b> {profile.lookingForAJob ? 'Да' : 'Нет'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>Мои навыки: </b> {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Обо мне :</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Мои контакты :</b> {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './Post.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport like from '../../../../../assets/images/like.svg'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n    <div className={style.post}>\r\n        <div className={style.avatar}>\r\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ9Kj6cPQDCYYnGSFWl729oSTFLzKA2WWQII5Mzj_eYAwB88T_E&s'/>\r\n        </div>\r\n        <div className={style.postText}>\r\n            {props.message}\r\n        </div>\r\n        <div className={style.likeBlock}>\r\n            <img src={like}/>\r\n            {props.likesCount}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\nPost.propTypes = {\r\n    likesCount: PropTypes.number,\r\n    message: PropTypes.string\r\n}\r\n","import React from 'react';\r\nimport style from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport PropTypes from 'prop-types';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../utilits/validators/validators\";\r\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'newPostBody'} placeholder={\"What's new?\"}\r\n                validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm({\r\n    form: 'newPostBody'\r\n})(AddNewPostForm)\r\n/*для того чтоб компонента лишний раз не перерисовывалась, можно сделать проверку пропсов\r\nи стейта в shouldComponentUpdate. данная проверка автоматически сделана в классовой\r\nкомпоненте PureComponent, а для того чтоб использовать функциональные компоненты,\r\nзадействуем метод React.memo, который вызовет внутреннюю функцию и вернет другую компоненту*/\r\nconst MyPosts = React.memo(props => {\r\n    /*взяли копию пропсов, чтоб при использовании метода reverse() не менять отсюда глобальный стейт*/\r\n    let postData = [...props.postData];\r\n    let postsElements = postData.reverse().map(post => <Post key={post.id} message={post.message} likesCount={post.likesCount}/>)\r\n\r\n    const addPost = (values) => {\r\n        props.addPost(values.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={style.myPosts}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={addPost}/>\r\n            {postsElements}\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n\r\nMyPosts.propTypes = {\r\n    postData: PropTypes.array,\r\n    newPostText: PropTypes.string\r\n}","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return (\r\n        {\r\n            postData: state.profilePage.postData,\r\n            newPostText: state.profilePage.newPostText\r\n        }\r\n    )\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return (\r\n        {\r\n            addPost: (newPostText) => {\r\n                dispatch(addPostActionCreator(newPostText))\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport style from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport PropTypes from 'prop-types';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n\r\nProfile.propTypes = {\r\n    postData: PropTypes.array,\r\n    newPostText: PropTypes.string\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../../Redux/profileReducer\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId; /*получаем userId с сервера при клике на юзера, для отрисовки\r\n        своего профиля делаем проверку с помощью if*/\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer)"],"sourceRoot":""}